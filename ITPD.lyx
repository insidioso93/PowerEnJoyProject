#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ITPD
\begin_inset Newline newline
\end_inset

Integration Test Plan Document
\end_layout

\begin_layout Author
Luca Marzi
\begin_inset Newline newline
\end_inset

Valeria Mazzola
\begin_inset Newline newline
\end_inset

Federico Nigro
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Revision History
\end_layout

\begin_layout Standard
(here goes all the revisions of the document)
\end_layout

\begin_layout Subsection
Purpose and Scope
\end_layout

\begin_layout Standard
This document is the Integration Testing Plan for the PoweEnJoy system.
\end_layout

\begin_layout Standard
The term 
\begin_inset Quotes eld
\end_inset

PowerEnJoy system
\begin_inset Quotes erd
\end_inset

 refers to the set of all the software artifacts (developed or bought) that
 cooperates in order to provide all the functionalities which are specified
 in the RASD document describing the PowerEnJoy services.
\end_layout

\begin_layout Standard
The purpose of this document is to outline, in a clear and comprehensive
 way, the main aspects concerning the organization of the integration testing
 activity for all the components that make up the system.
\end_layout

\begin_layout Standard
In the following section we are going to provide:
\end_layout

\begin_layout Itemize
An exhaustive description of the integration process that we intend to follow
 with respect to the architecture that has been proposed in previous documents.
\end_layout

\begin_layout Itemize
A description of the integration testing approach and the rationale behind
 it.
\end_layout

\begin_layout Itemize
A description of the test cases and test suites that we intend to perform
 on the main interfaces and modules interactions.
\end_layout

\begin_layout Itemize
A description of the main perfomance evaluation that we want to perform
 against the system.
\end_layout

\begin_layout Itemize
A list of tools that we are going to use to perform the whole Verification
 & Validation analysis.
\end_layout

\begin_layout Standard
It's important to remark the fact that the Integration Testing Plan is intimatel
y connected with the Build Plan (or Integration Plan): the effective development
 of components and interfaces will be guided mainly by the criteria defined
 for the Integration Testing.
\end_layout

\begin_layout Standard
At the end, the idea is to follow the 
\begin_inset Quotes eld
\end_inset

develop and test
\begin_inset Quotes erd
\end_inset

 approach, applied not only to software units but also to entire subsystems.
\end_layout

\begin_layout Subsection
List of Definitions and Abbrevations
\end_layout

\begin_layout Subsection
List of Reference Document
\end_layout

\begin_layout Itemize
RASD Document
\end_layout

\begin_layout Itemize
DD Document
\end_layout

\begin_layout Itemize
RASD: Requirements Analysis and Specification Document
\end_layout

\begin_layout Itemize
GPS: Global Positioning System
\end_layout

\begin_layout Itemize
SDK: Software Development Kit
\end_layout

\begin_layout Itemize
DBMS: Database Management System
\end_layout

\begin_layout Section
Integration Strategy
\end_layout

\begin_layout Standard
This document aims to describe a consistent strategy should allow us to
 obtain an overall suboptimal quality with respect to all the functional
 and non functional requirements that have been specified in previous documents.
\end_layout

\begin_layout Standard
For this reason, both the RASD and the DD documents must be completed before
 proceeding with the integration phase that is eventually described in this
 document; the idea is that all the major aspects about the software architectur
e and the componet design, as weel as all the major functionalities, shall
 be available for a further analysis from the point of view of the integration
 that has to be made in order to obtain the complete system behind the PowerEnJo
y services.
\end_layout

\begin_layout Standard
All the important conditions that have to be satisfied in order for this
 document to be applicable are explained below.
\end_layout

\begin_layout Subsection
Entry Criteria
\end_layout

\begin_layout Standard
Before the beginning of the Integration Testing some criteria have to be
 satisfied:
\end_layout

\begin_layout Standard

\series bold
(in pratica sto dicendo che: ogni componente deve essere già ben definita,
 il sistema rispetto all'ambiente deve avere 
\begin_inset Quotes eld
\end_inset

confini
\begin_inset Quotes erd
\end_inset

 che non saranno piu modificati, le interfacce tra le varie componenti e
 per l'utente devono essere gia ben definite, deve esserci una documentazione
 parziale per poter capire qual è eventualmente l'errore e che il white
 box test deve essere fatto (quello per gli errori strutturali, mi è sembrato
 buono aggiungerlo perche l'ho trovato gia specificato in un documento e
 poi ricordo che va fatto comunque prima rispetto a questo tipo di test)
\end_layout

\begin_layout Itemize
Every logical and functional component of the System is well defined and
 well connected with each other.
 In particular, the interactions among entities presented in the Architecture
 Schema and in the Sequence Diagrams are in their final version, as well
 as correctly implemented through the specify tools (see the Design Document).
\end_layout

\begin_layout Itemize
The edges of the System with respect to the remaining part of the Environment
 are well defined: there is nothing more to add to the System in terms of
 functionalities and there is nothing less to subtract to it (see requirements
 and goals in the RASD).
\end_layout

\begin_layout Itemize
Every interface, among entities and regarding the interaction with the User,
 is defined and in a util version for the next test analysis.
 In other words, it is not yet necessary a final implementation in this
 case, but it has to be clear how the transictions works and what precisely
 the User can receive and send via the particular interface (for instance
 the case of the Mobile App and the On Board System).
\end_layout

\begin_layout Itemize
In addition to the inputs to give to the System by the Integration Test,
 it is not less important to have a clear view of what every functional
 part does within the System (with a non final, but still well detailed
 documentation for each important component of the functional part object
 of study).
\end_layout

\begin_layout Itemize
Referring to the point above, the White Box Test has to be done for all
 the functional parts already implemented and analized in the Design Document
 and in the RASD previously.
 This means that, referring to the software components of the System described
 in the Design Document especially, all the portions of code regarding the
 UserController, the PaymentManager, the AdministrationHelper and the CarControl
ler were correctly and rationally deconstructed and eventually rewritten
 in some of their parts, for avoiding unreachable lines of code and typical
 conceptual errors.
 The BusinessManager is analyzed in the same way, paying a particular attention
 to the single links with the other components inside the whole schema (in
 general testing the links among logic units is important for their influences
 to themselves).
\end_layout

\begin_layout Subsection
Elements to be integrated
\end_layout

\begin_layout Standard
(identify the components to be integrated, refer to your design document
 to identify such components in a way that is consistent with your design)
\end_layout

\begin_layout Standard

\series bold
(in pratica in questa sezione vanno brevemente elencati con una breve spiegazion
e tutti i componenti che vengono utilizzati nella sessione 2.4 e eventualmente
 nel DD)
\end_layout

\begin_layout Subsection
Integration Testing Strategy
\end_layout

\begin_layout Standard
There are several possibile Integration Testing Strategies in the literature;
 our purpose is to choose to one that better fits with the Build Plan that
 emerges from the designes choices described in the DD.
\end_layout

\begin_layout Standard
Here is a brief recap about the most populare Integration Testing Strategies
 described in the literature with some considerations about their applicability
 in the context of this project.
\end_layout

\begin_layout Itemize
Top-down: the top-down integration stategy starts from the highest level
 of the archicture and proceeds with the integration testing of lower level
 (with respect to the 
\begin_inset Quotes eld
\end_inset

use
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

include
\begin_inset Quotes erd
\end_inset

 relations) components and subsystems.
 Typically, this approach requires the development of good quality stubs
 to emulate low level components.
 With respect to the context of the core our project, this approach doesn't
 offer any particular advantage: the core of our system is composed by highly-cu
stomized low level software components (such as the ones that are deployed
 into the physical cars) that would be too much difficult to emulate throgh
 good quality stubs.
 
\end_layout

\begin_layout Itemize
Bottom-up: the bottom-up integration stategy starts from the lowest level
 of the architecture and proceeds towards the top of it.
 Typically this approach requires the developement of good quality drivers
 for those subcomponts whose integration has to be tested.
 With respect to the contet of the core of our project, this approach seems
 to be the best one: it allows us to focus on those components that are
 at the core of the architecture and at its lowest levels.
\end_layout

\begin_layout Itemize
Thread: the thread integration strategy consists of testing several modules
 (or part of them) that offer a user-visible subset of functionalities.
 With respect to the context of our project, this strategy seems suitable
 to iteratively provide an increasing number of functionality to the driver
 that emulates the user interaction.
\end_layout

\begin_layout Itemize
Critical modules: this strategy consists of testing the riskiest modules
 first (provided a risk function).
 With respect to the context of our project, we have already mentioned the
 idea of 
\begin_inset Quotes eld
\end_inset

core
\begin_inset Quotes erd
\end_inset

 subsystems that lie at the bottom of the system's architecture.
 This strategy may become useful when evaluating the next low-level interaction
 that has to be considered for testing purposes.
\end_layout

\begin_layout Standard
Given all the considerations above, here are the guide lines for the Integration
 Testing Strategy for the project: we decide to follow the Bottom-up strategy
 as Integration Testing Strategy of the entire system with risk evaluation
 of all those low level critical compoments that are highlighted eventually
 in this document.
\end_layout

\begin_layout Standard
Although some combination of the Bottom-up approach with the Top-down approach
 might be useful in terms of early testing of some of the some user functionalit
ies (such as the GUI), we believe that such a combination would result in
 a too much difficult integration plan.
 
\end_layout

\begin_layout Standard
We believe that the best approach for integrating and testing consists of
 the developement and testing of a solid API on the top of which all the
 user (and administration) can be developed and tested.
\end_layout

\begin_layout Subsection
Sequence of Component/Function Integration
\end_layout

\begin_layout Subsubsection
Software integration sequence
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
S1 User Interactions Subsystems
\end_layout

\begin_layout Itemize
In this section the subsystems related to all the User's aspects towards
 the System will be analyzed.
 A particular attention for all the relevant inputs of the User is the guideline
 to cover appropriately all the Test Cases.
 Every division of the section is referred to a particular situation between
 the entities, the references to the various situations are located in the
 Sequence Diagrams paragraph in the DD document and the various Scenarios,
 previously showed up in the RASD document.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\bar under
S1.1:
\bar default
 Autentication and Registration Subsystem
\end_layout

\begin_deeper
\begin_layout Standard
It corresponds to the description of what happens at the moment of the very
 first access of the User to the Mobile App.
 Hence, She/He shall communicate to the Mobile App and, forwardly, to the
 Server, if the aim is a new registration or just a logging on to the service.
\end_layout

\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
the particular choice of the User (if she/he wants to sign in or sign up)
\end_layout

\begin_layout Enumerate

\series bold
Fields to be compiled by the User during the 
\bar under
sign up
\bar default
 operation:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Mandatory fields:
\end_layout

\begin_deeper
\begin_layout Enumerate
name
\end_layout

\begin_layout Enumerate
surname
\end_layout

\begin_layout Enumerate
e-mail
\end_layout

\begin_layout Enumerate
address
\end_layout

\begin_layout Enumerate
country
\end_layout

\begin_layout Enumerate
nationality
\end_layout

\begin_layout Enumerate
credit card number
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Not Mandatory fields:
\end_layout

\begin_deeper
\begin_layout Enumerate
phone 
\end_layout

\begin_layout Enumerate
mobile
\end_layout

\begin_layout Enumerate
nickname
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\series bold
Fields to be compiled by the User diring the 
\bar under
sign in
\bar default
 operation:
\end_layout

\begin_deeper
\begin_layout Enumerate
a unique field in which a string composed by the 
\bar under
name surname
\bar default
 sequence, or the 
\bar under
e-mail
\bar default
 or the 
\bar under
nickname
\bar default
 (this field identifies the particular User)
\end_layout

\begin_layout Enumerate
the password associated to the User specified by the field above
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.2:
\bar default
 Choice Menu Subsystem
\end_layout

\begin_deeper
\begin_layout Standard
It corresponds to the description of the switching options available for
 the User within the context of the functionalities and the set of windows
 of the Mobile App.
\end_layout

\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Itemize
User experience with the integration of the commands and the interactions
 of the views of the App.
\end_layout

\end_deeper
\begin_layout Itemize
(Image)
\end_layout

\begin_layout Itemize
The presence of the 
\begin_inset Quotes eld
\end_inset

Second Level Check Unit
\begin_inset Quotes erd
\end_inset

 is required for the case because of the recovery of some information from
 the Server.
 This information, regarding for instance the positions of the User and
 the Car, as well as the datas of the User for the particular view (see
 the User Interface Design paragraph in the DD document for a visive reference),
 are displayed after a correct call to the server.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.3:
\bar default
 Profile Management Subsystem
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operation to test:
\end_layout

\begin_layout Standard
In the table below some changings of parameters due to the User actions
 in her/his own profile are figured out with respect to a certain grade
 of priority.
 In fact is important to understand for this section, how much modifiations
 by the User will affect directly or not, other internal of the software:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Priority
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the number of the credit cart used for the payment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
High
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the password for accessing to the service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
High
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the e-mail
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
High
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the country
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medium
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medium
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the mobile/phone number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medium
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the nickname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Low
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
changing the profile picture
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Low
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.4:
\bar default
 Unlocking the Car Subsystem:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
The User proximity to her/his reserved Car after the reservation (periodically
 verified in any case)
\end_layout

\begin_layout Enumerate
The User's expressed will to unlock the Car (and so, the process of reponse
 and reply of the Mobile App and the Server, see the Sequence Diagram in
 the DD document for discovering more)
\end_layout

\begin_layout Enumerate
The conditions of proximity during the will expressed by the User (and so
 all the cases in which there can be a negative or a positive reponse from
 the Server)
\end_layout

\begin_layout Enumerate
The unlock of the Car process (as directly consequence of the points above).
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.5:
\bar default
 Locking the Car Subsystem:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
The User proximity to her/his reserved Car after the end of the ride, as
 well as the User condition of being out of the vehicle (the Server makes
 this analysis thanks to the interaction with the Car's System and indirectly
 the sensors of the Car, in addition to the usual interaction with the Mobile
 App.
 See the Sequence Diagrams in the DD document for discovering more)
\end_layout

\begin_layout Enumerate
The condition of closure of the Car by the User
\end_layout

\begin_layout Enumerate
The lock of the Car process (as directly consequence of the points above).
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.6:
\bar default
 Cancel a reservation Subsystem:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
The Active instance of the service for the User who decides to cancel the
 current reservation
\end_layout

\begin_layout Enumerate
The deactivation process (it means all the operations in the two ways interactio
n which have the reservation cancelled as a final result).
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.7:
\bar default
 Fees Subsystem:
\end_layout

\begin_deeper
\begin_layout Standard
The meaning of this subsystem is to control and properly respond to the
 various conditions which bring the User in some of the situations to pay
 some additional fees to the System.
 In the table below there is a brief recapitulation of the set of fees to
 pay in the different particular cases (but if you want to know more about
 it, in the RASD and DD documents the topic is further illustrated):
\end_layout

\begin_layout Itemize
(table)
\end_layout

\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
If for each of the situations just showed all the points of the column 
\begin_inset Quotes eld
\end_inset

entered condition
\begin_inset Quotes erd
\end_inset

 are effectively consumed
\end_layout

\begin_layout Enumerate
The process of alerting the User of the exception raised and of displaying
 her/him the total amount to pay for the particular situation
\end_layout

\begin_layout Enumerate
The process of correctly calculating the fee for the particular situation
\end_layout

\begin_layout Enumerate
The process of opening correctly an instance between the Transactional System
 and the User (verifying the correct production of the new object containing
 all the necessary User's datas necessary to correctly conclude the step)
\end_layout

\begin_layout Enumerate
The final result produced by the verification of the sentences above: the
 System has to open another instance and so repeating the phases if the
 transaction is incorrectly made, or close the whole circumstance in the
 opposite case.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.8:
\bar default
 Payment Subsystem:
\end_layout

\begin_deeper
\begin_layout Standard
It is very similar to the Fees Subsystem, but in this case the instance
 between User and Transactional System is opened not for the raising of
 particular exception due to particular 
\begin_inset Quotes eld
\end_inset

entered condition
\begin_inset Quotes erd
\end_inset

, but just to correctly manage the payment after the end of a ride.
\end_layout

\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
The inputs that highlight the end of the current ride of the particular
 User (see the RASD and DD documents for a detailed description):
\end_layout

\begin_deeper
\begin_layout Enumerate
the Car is correctly parked with the engine switched off
\end_layout

\begin_layout Enumerate
All the passengers, User included, got off the Car
\end_layout

\end_deeper
\begin_layout Enumerate
The process of calculating the total amount of money to pay by the User.
\end_layout

\begin_layout Enumerate
The process of alerting the User of the end of the ride and of displaying
 her/him the total amount to pay, calculated and verified in the previous
 step
\end_layout

\begin_layout Enumerate
The process of opening correctly an instance between the Transactional System
 and the User (such as in the Fees Subsystem, but changing some entry parameters
)
\end_layout

\begin_layout Enumerate
The final result produced by the verification of the sentences above: the
 System has to open another instance and so repeating the phases if the
 transaction is incorrectly make, or close the whole circumstance in the
 opposite case.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.9:
\bar default
 Assistance Subsystem
\end_layout

\begin_deeper
\begin_layout Standard
This section aims to rule out some tests to be made on the communication
 between the User and an Operator if needed.
\end_layout

\begin_layout Itemize

\series bold
Operation to test:
\end_layout

\begin_deeper
\begin_layout Enumerate
The choice of either talking or chatting with the Operator.
 The decision is made by the User and communicated to the Server via the
 Mobile App or the Car's System
\end_layout

\begin_layout Enumerate
The opening and handling of the connection powered by the Server
\end_layout

\begin_layout Enumerate
The closure of the connection once the communication is finished
\end_layout

\begin_layout Enumerate
The management of the relative notification to the User and the Operator
 if needed.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\bar under
S1.10:
\bar default
 Car communication Subsystem
\end_layout

\begin_deeper
\begin_layout Standard
This section expresses a set of extra functionalities designed for the User
 who starts the ride and outlined by the Car's System.
 For some of them the presence of the Server is necessary, for other ones
 the Car's System can completely handle the request and shows the outputs
 to the User.
\end_layout

\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Itemize
(table)
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
S2 Interaction with the Payment Subsystem
\end_layout

\begin_layout Itemize
This section wants to provide a better and brief description of how the
 System manages the different interactions with the Payment System (if you
 need a better description of the nature of it, you can refer to the RASD
 and the DD documents).
 The System, in particular, has to build a precise instance of an object
 with some inputs statements whose correctness in the form has to be clear
 to the Transactional System.
 On the other way, it will be the Transactional System to return typed values
 from the corresponding function calls that the System can understand and
 correcly handle for next steps of the operations.
 This concepts have to be clear indipendently from the implementation details
 and all the exceptions in the middle has to be managed by the System.
 In details:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
A correct analysis of all the inputs parameters to be delivered to the Transacti
onal System (this means making them correctly in the previous operations
 and verifying them just before the opening of the communication with the
 Transactional System):
\end_layout

\begin_deeper
\begin_layout Enumerate
The Object describing the User and her/his specifics (such as name, surname,
 number of credit card)
\end_layout

\begin_layout Enumerate
The Object describing the amount of payment to be paid by the User and that
 the System expects after the call
\end_layout

\begin_layout Enumerate
The Object describing the nature of the payment (if it regards either an
 end of the ride instance or a particular fee)
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
A correct analysis of all the outputs parameters returned by the Transactional
 System:
\end_layout

\begin_deeper
\begin_layout Enumerate
The Object regarding the id of the payment (all the ids are stored momentaneousl
y for the current active transactions by the Server) and if there is a correspon
dence with one in the temporary list
\end_layout

\begin_layout Enumerate
The Object which contains the informations about the payment and the User
 (hence the Server can start to open a new communication with the User to
 alert)
\end_layout

\begin_layout Enumerate
The Object regarding the result of the transaction:
\end_layout

\begin_deeper
\begin_layout Enumerate
if the transaction is incorrect the System has to repeat the whole operation
\end_layout

\begin_layout Enumerate
if the transaction is correct the System has to inform the User and correctly
 close the communication for the particular case with it and with the Transactio
nal System.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
S3 Interaction with the Database Subsystem
\end_layout

\begin_layout Itemize
Such as for the previous section, some interactions with the Database shall
 be controlled by the Server and some of the exceptions handled for avoiding
 in general a crash of the application.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
If the exceptions affecting tables of the Database are handled in a way
 that allows the System to complete the analized operations anyway, this
 is important for all the different kind of operations which regard the
 interaction with the System and the Database and, deeper:
\end_layout

\begin_deeper
\begin_layout Itemize
Exceptions on null values
\end_layout

\begin_layout Itemize
Exceptions on inserts
\end_layout

\begin_layout Itemize
Exceptions on updates
\end_layout

\begin_layout Itemize
Exceptions on deletes
\end_layout

\begin_layout Itemize
Exceptions on particular conditions of the Database
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
S4 Management Unit Subsystem:
\end_layout

\begin_layout Itemize
For better understanding the purpose of this section, you can think about
 all the Subsystems described in the 
\series bold
S1 
\series default
but focalized in an 
\begin_inset Quotes eld
\end_inset

inverse manner
\begin_inset Quotes erd
\end_inset

.
 In other words, now it is not the User the centre of the topic, but the
 Administrators and Operators which have the important role to govern the
 entire Service thanks to some tools offered by the System.
 
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Operations to test:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
The mapping between the set of actions taken by the User in the application
 in one of its particular context and the log file produced for the Administrato
r
\end_layout

\begin_deeper
\begin_layout Standard
The actions of the Users for the different scenarios are stated inside a
 log file, the test regards checking if the actions are univoquely mapped
 inside it and updated with respect to the current date and time.
 This is important because in exceptional and common case the Administrator
 can always relies on this kind of documentation.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
If the channels of communications between the User and the Operator are
 in functions
\end_layout

\begin_deeper
\begin_layout Standard
This set of channels regards in details:
\end_layout

\begin_layout Itemize
A direct communication with a chat or with a call
\end_layout

\begin_layout Itemize
An 
\begin_inset Quotes eld
\end_inset

injection of code
\begin_inset Quotes erd
\end_inset

 which allows the operator to diplay to the User some particular statements
 of message from the application (the Mobile App or the Car's System) at
 the occurence.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
Components:
\end_layout

\end_deeper
\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Subsystem integration sequence
\end_layout

\begin_layout Standard
Indentify the order in which subsystems will be integrated ...
\end_layout

\begin_layout Section
Individual Step and Test Description
\end_layout

\begin_layout Standard

\series bold
(da fare dopo aver fatto 2.4 cioe poi addentrandosi dentro tutti i componenti
 che andiamo ad analizzare con 2.4)
\end_layout

\begin_layout Section
Tools and Test Equipment Required
\end_layout

\begin_layout Standard
Here is a brief explaination of all the tools that we want to use to perform
 all the main passages of the Integration Testing described in previous
 chapters of this document.
\end_layout

\begin_layout Itemize
JUnit: is the mainstream suite for testing software components and units
 written in Java.
 We aim to take advantage of all the main functionalities provided by JUnit
 to test software units; here are some of the advantages that we can obtain
 by using this tool:
\end_layout

\begin_deeper
\begin_layout Itemize
JUnit tests allow you to write codes faster, which increases quality.
\end_layout

\begin_layout Itemize
JUnit tests can be run automatically and they check their own results and
 provide immediate feedback.
 There's no need to manually comb through a report of test results.
\end_layout

\begin_layout Itemize
JUnit tests can be organized into test suites containing test cases and
 even other test suites.
\end_layout

\begin_layout Itemize
JUnit promotes the idea of "first testing then coding", which emphasizes
 on setting up the test data for a piece of code that can be tested first
 and then implemented.
\end_layout

\end_deeper
\begin_layout Standard
Java code will be used mainly for those software components that are related
 to the mobile application for the Android platform.
\end_layout

\begin_layout Standard
The Android SDK provides additional tools that can be used to verify Java
 the correctness code and to test the performance of the overall application
 on different types of device.
\end_layout

\begin_layout Standard
These tools are:
\end_layout

\begin_layout Itemize
the Memory Profiler
\end_layout

\begin_layout Itemize
the Memory Monitor and Allocation Tracker
\end_layout

\begin_layout Itemize
the Battery Profiler
\end_layout

\begin_layout Standard
Talking about mobile applications, there are software tools (provided by
 Apple) for automatically checking correctness and performance of iOS applicatio
ns on several versions of virtual or physical iOS devices.
 We want to mention some of them such as:
\end_layout

\begin_layout Itemize
the Performance Profiling Tool
\end_layout

\begin_layout Itemize
the Activity Monitor
\end_layout

\begin_layout Itemize
the MallocDebug
\end_layout

\begin_layout Standard
With respect to the Business Logic, being it developed within the Java 2E
 framework (as described in previous documents), we aim to use:
\end_layout

\begin_layout Itemize
Arquillian integration testing framework: this tool enables us to execute
 tests against a Java container in order to check that the interaction between
 a component and its surrounding execution environment is happening correctly.
\end_layout

\begin_layout Section
Program Stubs and Test Data Required
\end_layout

\begin_layout Section
Effort Spent
\end_layout

\end_body
\end_document
