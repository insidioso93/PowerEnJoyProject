#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\options titlepage
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DD
\begin_inset Newline newline
\end_inset

Design Document
\end_layout

\begin_layout Author
Luca Marzi
\begin_inset Newline newline
\end_inset

Valeria Mazzola
\begin_inset Newline newline
\end_inset

Federico Nigro
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The purpose of this document is to define the design of the PowerEnJoy applicati
on up for developers.
 Next paragraphs will be focused on an expansion of the different technical
 components integrated in the application and their functionalities, starting
 from what the RASD has introduced.
 The analysis will comprise the following elements:
\end_layout

\begin_layout Itemize
high level architecture
\end_layout

\begin_layout Itemize
design patterns
\end_layout

\begin_layout Itemize
main components and interfaces and their interactions
\end_layout

\begin_layout Itemize
runtime behaviours
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The System (described in the RASD as the entity containing the main aspects
 of the application) is now divided in five complementary parts.
 The first of them consists of the Mobile App, which interacts with the
 User; the second is the Database Server, containing a protected copy of
 User's and Car's datas, the third is the Application Server, which is a
 Server Java; the fourth part is the Administration App, from which the
 administrators control the entire service process and the fifth part is
 the Car's System (On Board System), whose role is to guaranteed the communicati
on between the Application Server and the User.
 The Server Java, has the important role to correctly and syncronously manage
 the communications among the different entities and actors, participating
 to the different horizontal and vertical instances of the service.
 We already show the main actors in the RASD and now we can say that the
 Client is everyone who aims to drive one of the vehicles offered by the
 Service, whilst different connections and interfaces exist between the
 Application Server and the Car's System (which surely has a proper application
 inside) and between the System and the Payment System.
 The aspect of the registration by the Client is important, because the
 System has finally all the User's data when it is needed and this is a
 simplifiation on the various requests among actors too.
 Hence we can assume that errors due to incorrect data inserted by the User
 only come up during the registration phase.
 Other facilities are considered regarding the payment (characteristic of
 the Payment System) and the primitives of interaction with the database.
 In addiction to the main fucntionalities, the System can offer some extra
 functionalities: a FAQ service, a communication with an operator at necessity,
 a forum service and a news service are also guaranteed for the User.
 We finally conclude this sub paragraph saying that features of applications
 will be discussed in this document, keeping track of what the RASD already
 drew up about the System, with some more details and modifications when
 needed.
 We can also state that the System itself will be built to be reliable and
 efficient, according to its purpose and integration in the World and in
 what we addressed as Environment in the RASD.
\end_layout

\begin_layout Subsection
Definitions, acronyms and abbreviations
\end_layout

\begin_layout Itemize

\series bold
Mobile App: 
\series default
the particular component of the System which aims to interacts with the
 User friendly and giving all its needed to correctly offer the service
 by the Application Server.
\end_layout

\begin_layout Itemize

\series bold
Application Server: 
\series default
the particular component of the System which aims to efficiently offer the
 service to the User, giving all the required informations and responding
 to User inputs on the Mobile App.
\end_layout

\begin_layout Itemize

\series bold
Server Java: 
\series default
it is the way the Application Server is built.
 Designing the Server through this kind of technology means using a Java
 environment, services and facilities.
\end_layout

\begin_layout Itemize

\series bold
Database Server: 
\series default
it is where all the informations relative to the service's utilization are
 stored, permanently or temporarily.
 It has to be designed to have the important properties of databases: Atomicity
 and Consistency of operations and datas, for all the time they are in the
 database; Isolation, because the operations and datas of different Users
 and different instances must be detached from each others and Durability,
 because the database must ensure that datas won't be lost during their
 permanence in static memory.
\end_layout

\begin_layout Itemize

\series bold
Horizontal instances: 
\series default
in the lecture above, it refers to multiple connections opened with different
 Users in parallel way.
 Users can communicate with the Server at the same time and without having
 any overlap during the whole service.
\end_layout

\begin_layout Itemize

\series bold
Vertical instances: 
\series default
in the lecture above, it refers to the chains of actions taken to reach
 the scope of all the service relatives to a single User.
 This term embraces the actions of the User and of the Server too.
\end_layout

\begin_layout Itemize

\series bold
Clients: 
\series default
it is the User and her/his Mobile App which generally interact with the
 Server.
\end_layout

\begin_layout Itemize

\series bold
Service: 
\series default
it is generally what the System longs to offer to Users and, in particular,
 the topic, currently covered by the RASD and the DD too.
\end_layout

\begin_layout Itemize

\series bold
JSON
\end_layout

\begin_layout Itemize

\series bold
Http
\end_layout

\begin_layout Itemize

\series bold
client-server protocol
\end_layout

\begin_layout Itemize

\series bold
cache
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
As mentioned before, the System is divided in different, indipendent, software
 and hardware components.
 The principal component is the Server Java.
 Every other component interacts with the Server using different protocols,
 designed for the particular purpose.
 The communication with the Mobile App is due to the Http/Json protocols
 and the meaning of the RESTful API architecture.
 This architecture shows some foundamental principles up: between Client
 and Server there are some web resources, manipulates for correctly allowing
 the interaction between the two entities; hyperlinks are usefull for the
 transactions and some interfaces are displayed continuosly to the User.
 This kind of interfaces have some bonded and well-defined operations; some
 content, which can be changed on demand and by the Server; a particular
 protocol for regulating the trasmission.
 The protocol is a client-server and stateless protocol and establishes
 also how the cache is used and the tiers in which the System is generally
 divided.
 Going on the System division in tiers we have one layer, which is the client;
 one another, which represents the On Board System (it contains its indipendent
 system for the correct utilization of the features inside the Car, but
 this component is strictly correlated to our System) and the Server, which
 is responsible of all the controls on inputs from the two entities.
 The logic of the application, in particular, is all up to the Server.
 Finally the Server stores and retrieves informations from the Database
 using MySql.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Architecture/architecture-draft.jpg

\end_inset


\end_layout

\begin_layout Subsection
High level components and their interactions
\end_layout

\begin_layout Standard
A simple high level representation of the system is shown in the following
 diagram.
\end_layout

\begin_layout Standard
[TODO]
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Component-View"

\end_inset

Components of the application server
\end_layout

\begin_layout Standard
The following section describes the components of the application server
 and defines their role in the architecture.
\end_layout

\begin_layout Subsubsection
User Controller
\end_layout

\begin_layout Standard
The User Controller module handles communication with the user's mobile
 application.
\end_layout

\begin_layout Subsubsection
Car Controller
\end_layout

\begin_layout Standard
The Car Controller implements the communication protocol between the on-board
 system of the cars, previously identified as actors, and the core of the
 application to be developed.
\end_layout

\begin_layout Standard
Therefore, this module will provide an interface to the rest of the application
 allowing the exchange of the following types of messages:
\end_layout

\begin_layout Itemize
ordinary telemetry such as GPS position, battery status and other sensor
 information;
\end_layout

\begin_layout Itemize
commands from the application to the car;
\end_layout

\begin_layout Itemize
events from the car to the application.
\end_layout

\begin_layout Standard
The Car Controller is a thin module and has no knowledge of the application's
 logic, or the cars' state.
 It is to be implemented as a thread pool, each thread in charge of keeping
 the communication active with a single car.
\end_layout

\begin_layout Subsubsection
Business Manager
\end_layout

\begin_layout Standard
The Business Manager implements the business logic of the application.
 It is composed of the following sub-components:
\end_layout

\begin_layout Itemize
User Request Handler
\end_layout

\begin_layout Itemize
User Manager
\end_layout

\begin_layout Itemize
Reservation Manager
\end_layout

\begin_layout Itemize
Car Manager
\end_layout

\begin_layout Standard
They are described more in detail in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Sub-components-of-the"

\end_inset

.
\end_layout

\begin_layout Standard
The Business Manager is the core of the application.
 As such, it will access the database to issue all the needed database operation
s.
\end_layout

\begin_layout Subsubsection
Administration Helper
\end_layout

\begin_layout Standard
This module provides the API necessary for administration purposes.
\end_layout

\begin_layout Subsubsection
Payment Manager
\end_layout

\begin_layout Standard
The Payment Manager implements the interface between the application and
 the external payment system used for monetary transactions.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Sub-components-of-the"

\end_inset

Sub-components of the Business Manager
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Car-Manager"

\end_inset

Car Manager
\end_layout

\begin_layout Standard
The Car Manager encapsulates the handling of car states logic, as well as
 the car pool itself, meaning it must provide the following functionality:
\end_layout

\begin_layout Itemize
car state handling;
\end_layout

\begin_layout Itemize
authentication of cars into the system;
\end_layout

\begin_layout Itemize
subscription of new cars to the pool and removal of old ones.
\end_layout

\begin_layout Standard
The car states are described in the following state diagram:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename diagrams-svg/Car-state-diagram.svg
	display false
	scale 32

\end_inset


\end_layout

\begin_layout Standard
In order to encapsulate the car states, the Car Manager will interact with
 the Car Controller by issuing commands and receiving events.
 The Car Manager must be able to respond to information queries such as:
\end_layout

\begin_layout Itemize
get the state of a car;
\end_layout

\begin_layout Itemize
get a set of cars by position and state.
\end_layout

\begin_layout Standard
The Car Manager also has knowledge of the parking areas and is in charge
 of deciding if a car has been parked in an acceptable location.
 This information is then forwarded to the Reservation Manager in order
 for it to account for fees or discount when necessary.
\end_layout

\begin_layout Standard
The functionalities implemented by this module will trace requirements [R2.2],
 [R2.3], [R4.4].
\end_layout

\begin_layout Standard
The Car Manager will expose an interface to the Reservation Manager with
 the following types of methods:
\end_layout

\begin_layout Itemize
observers of car states and car sets;
\end_layout

\begin_layout Itemize
observer of car position;
\end_layout

\begin_layout Itemize
modifiers of car states.
\end_layout

\begin_layout Standard
The internal structure of the Car Manager is composed of a Car Pool Manager,
 handling authentications and subscriptions of cars to the pool, and a Car
 State Manager, handling the car states.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename diagrams-svg/car_manager_arch.svg
	display false
	scale 35

\end_inset


\end_layout

\begin_layout Subsubsection
Reservation Manager
\end_layout

\begin_layout Standard
The Reservation Manager is in charge of all reservation operations, including
 the computation of a reservation's cost.
\end_layout

\begin_layout Standard
It will interact with the other modules like so:
\end_layout

\begin_layout Itemize
interaction with the Car Manager:
\end_layout

\begin_deeper
\begin_layout Itemize
issue queries as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Car-Manager"

\end_inset

;
\end_layout

\begin_layout Itemize
use the Car Manager's methods to change the state of a car as a result of
 operations such as creation, deletion or expiration of a reservation;
\end_layout

\begin_layout Itemize
receive car events such as start/end of rides, activations/deactivations
 of the car's engine;
\end_layout

\begin_layout Itemize
receive special information, such as a badPark event, needed to account
 for fees to the user;
\end_layout

\end_deeper
\begin_layout Itemize
interaction with the User Request Handler
\end_layout

\begin_deeper
\begin_layout Itemize
TODO
\end_layout

\end_deeper
\begin_layout Standard
It will also interact with the external payment system in order for the
 transactions to happen.
\end_layout

\begin_layout Standard
It is responsibility of the Reservation Manager to ensure the correct handling
 of reservation logic and the fulfilling of related requirements [R2.4],
 [R3.2], [R4.1], [R4.2], [R4.3], [R4.5].
\end_layout

\begin_layout Subsubsection
User Manager
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsubsection
User Request Handler
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Requirement tracebility
\end_layout

\begin_layout Standard
All requirements not explicitly traced in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Component-View"

\end_inset

 will result from the combined action of the previously identified application
 modules.
 This is true for all [R5.*] requirements as well as [R6.1] and [R7.1].
\end_layout

\begin_layout Subsection
Deployment View
\end_layout

\begin_layout Standard
PowerEnJoy will be deployed as a three-tier architecture system as described
 by the following diagram:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename diagrams-svg/deployment-diagram.svg
	display false
	scale 22

\end_inset


\end_layout

\begin_layout Subsection
Runtime View
\end_layout

\begin_layout Subsubsection
Registration
\end_layout

\begin_layout Standard
In this phase the NonRegisteredUser obtains a valid registration to the
 service.
 She/He
\end_layout

\begin_layout Enumerate
expresses the will to make a registration by clicking on the registration
 Button in the Mobile App.
 The Mobile App sends a new request to the Server Java which
\end_layout

\begin_layout Enumerate
opens a new connection with the DBMS for the future storage of datas from
 the whole process.
 At this point the Mobile App
\end_layout

\begin_layout Enumerate
displays to the User the form with fields to be filled for the Registration.
 The User compiles the form and confirms it to the Mobile App.
 The Mobile App and the Server Java check if the compilation is maden correctly.
 If it is not the Mobile App
\end_layout

\begin_layout Enumerate
alerts the User of the lackness, else
\end_layout

\begin_layout Enumerate
datas are finally stored in the DBMS from the Server and the User receives
 the confirmation of the correct registration.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramRegistration.svg
	display false
	scale 13

\end_inset


\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
In this phase the User
\end_layout

\begin_layout Enumerate
compiles the form with her/his User Name and her/his password, the Mobile
 App sends the request for accessing to the Server Java, which questions
 the DBMS.
 The database makes a research and
\end_layout

\begin_layout Enumerate
informs the Server that there isn't any correspondence between the datas
 it has received and any of the stored instances, or
\end_layout

\begin_layout Enumerate
the correspondence exists.
 In every of these cases the Server warns the Mobile App of the current
 event and the User is so alerted by the App.
 If the authentication process ends without errors the Server retrieves
 correct informations from the DBMS and
\end_layout

\begin_layout Enumerate
as a final result the User can see her/his profile displayed by the Mobile
 App.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramAutentication.svg
	display false
	scale 16

\end_inset


\end_layout

\begin_layout Subsubsection
Activating the Money Saving Option
\end_layout

\begin_layout Standard
In this phase, the User who gets on the Car, 
\end_layout

\begin_layout Enumerate
types on the Screen of the Car the will to activates the Money Saving Option.
 The Server sideCar's System asks the User which is the final destination
 of her/his journey.
 The User types the Destination and
\end_layout

\begin_layout Enumerate
the Car's System checks the validity of the just inserted coordinates through
 the GPS service.
 If the control reports any error,
\end_layout

\begin_layout Enumerate
the User has to digit again the Destination (she/he can also come back to
 the previous context without Activating the Money Saving Option); else
\end_layout

\begin_layout Enumerate
the Car's System makes a request to the Server for obtaining the list of
 the available and nearest Safe Areas given the Position.
 The Server processes the request and effectively returns to the Car's System
 the requested list.
 At this point,
\end_layout

\begin_layout Enumerate
the list is showed to the User who selects one of the Areas.
 It is the Car's System which finally
\end_layout

\begin_layout Enumerate
computes the path to the Safe Area and
\end_layout

\begin_layout Enumerate
shows it to the User through the Car's Screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDActivatingSaveMoneyOption.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Finish a Ride
\end_layout

\begin_layout Standard
The User tells to the Car's System that
\end_layout

\begin_layout Enumerate
the ride ended andServer side
\end_layout

\begin_layout Enumerate
the Car's System asks for a confirmation.
 The Car's System
\end_layout

\begin_layout Enumerate
forwards the information to the Server which
\end_layout

\begin_layout Enumerate
wants to know from the Car's System all the details of the ride, for proceding
 to the payment phase.
 The system on board effevtively provides the required datas.
 The Server
\end_layout

\begin_layout Enumerate
processes the incoming informations and after
\end_layout

\begin_layout Enumerate
sends a request of payment to the Payment System.
 This last component confirms the payment to the Server and
\end_layout

\begin_layout Enumerate
explicitly asks for the payment to the User through the Mobile App.
 The User fills the form with her/his sensible datas about credit card and
 sends it again to the Payment System.
 The whole money transaction can
\end_layout

\begin_layout Enumerate
complete with errors and the User is alerted of this by the Mobile App;
 or
\end_layout

\begin_layout Enumerate
can complete correctly.
 In this last phase the User and the Server are alerted and the Server fills
 some fields in the DBMS with the history of current User's payment.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDFinishARide.svg
	display false
	scale 12

\end_inset


\end_layout

\begin_layout Subsubsection
Search and Book a nearby Car
\end_layout

\begin_layout Standard
In this phase the Logged User makes the request
\end_layout

\begin_layout Enumerate
to see the available Cars on the Screen of her/his device.
 Hence the Mobile App asks to the Server for the list of all the available
 Cars and, once obtained it, shows it to the User.
 At this point the User
\end_layout

\begin_layout Enumerate
selects one of the Car on the Screen.
 The App forward the selection to the Server which controls if the Car is
 still available.
 If the Car is no available anymore,
\end_layout

\begin_layout Enumerate
the User is informed by the App and there is the return to the previous
 context.
 Else
\end_layout

\begin_layout Enumerate
the prenotation is confirmed, the Mobile App
\end_layout

\begin_layout Enumerate
asks to the Server to retrieves the complete informations of the Car,
\end_layout

\begin_layout Enumerate
the details of the reservation are showed to the User and
\end_layout

\begin_layout Enumerate
she/he can see the details of the Car too.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSearchBookNearbyCar.svg
	display false
	scale 15

\end_inset


\end_layout

\begin_layout Subsubsection
Time Expiration
\end_layout

\begin_layout Standard
Once
\end_layout

\begin_layout Enumerate
a prenotation is confirmed, a countdown associated to the current ride instance
 starts.
 Reached a given timeout,
\end_layout

\begin_layout Enumerate
the Server informs the Mobile App of the expiration and the User is warned
 about the event and the amend to pay.
 She/He will pay it afterwards through a redirection to the Payment System.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramTimeExpiration.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Locking a Car
\end_layout

\begin_layout Standard
The Car's System
\end_layout

\begin_layout Enumerate
constantly verify a leave condition which consists to understand if all
 the passengers left the Car after a ride through the Car's Sensors.
 After the Server has received the leave condition,
\end_layout

\begin_layout Enumerate
it Locks the Car which confirms the event through an ack.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDLockingACar.svg
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Subsubsection
Unlocking a Car
\end_layout

\begin_layout Standard
The Server
\end_layout

\begin_layout Enumerate
constantly monitors the User position and it informs the Mobile App of the
 nearness condition when he/she exits.
 The Mobile App
\end_layout

\begin_layout Enumerate
shows the User a button or a popup, giving her/him the information of nearness.
 The User confirms the will to unlock the near Car and
\end_layout

\begin_layout Enumerate
the Server sends the command to the Car System.
 It finally warns the Server of the Unlock and
\end_layout

\begin_layout Enumerate
the User is informed of the event.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDUnlockingACar.svg
	display false
	scale 16

\end_inset


\end_layout

\begin_layout Subsubsection
Telemetry
\end_layout

\begin_layout Standard
The Car constantly continues to communicate with the System during its lifetime.
 In this particular case there is an updating of a first countdown T1 by
 the Car's System.
 If the Car's System doesn't send anything after the countdown is reached,
\end_layout

\begin_layout Enumerate
a position request is made by the Server after the achievement of a second
 countdown in it.
 Else
\end_layout

\begin_layout Enumerate
the Car's System correctly sends its position to the Server Java, which
 replies with an Ack.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDTelemetrySystem.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsection
Component Interfaces
\end_layout

\begin_layout Subsection
Selected Architectural Styles and Patterns
\end_layout

\begin_layout Standard
We have a selected a modified MVC-like architecture, with the Business Manager
 acting as a Model and multiple Controllers for distinct purposes.
 There will also be multiple distinct View modules, in the mobile application
 and in the car's on-board system, as well as a dedicated view for administratio
n purposes.
\end_layout

\begin_layout Standard
Our design also depicts a three-tier architecture, comprised of a client
 layer, an application server layer and a database server layer.
\end_layout

\begin_layout Subsection
Other decisions
\end_layout

\begin_layout Subsubsection
Administration View
\end_layout

\begin_layout Standard
We have decided to delay the implementation of the administration view for
 this phase, while the development of the administration API and a view
 stub will be prioritary, in order to provide the stakeholders with a way
 to access the system as soon as possible.
\end_layout

\begin_layout Subsubsection
Encryption of car-to-server communication
\end_layout

\begin_layout Standard
For security reasons, we decided to design an authentication feature for
 cars managed by the system.
 The identity of the cars will be checked by the server with a TLS-like
 cryptographic handshake and all communication between car and server, including
 ordinary telemetry, will be encrypted.
 Validation and deprecation of the keys will be managed through the administrati
on API and the keys physically inserted into the car's system by human operators.
\end_layout

\begin_layout Section
User Interface Design
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Section
Hours of work
\end_layout

\end_body
\end_document
