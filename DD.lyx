#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DD
\begin_inset Newline newline
\end_inset

Design Document
\end_layout

\begin_layout Author
Luca Marzi
\begin_inset Newline newline
\end_inset

Valeria Mazzola
\begin_inset Newline newline
\end_inset

Federico Nigro
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The purpose of this document is to clear the design of the PowerEnJoy applicatio
n up for developers.
 Next paragraphs will be focused on an expansion of the different technical
 components integrated in the application and their functionalities, starting
 from what the RASD has introduced.
 The analysis will comprise the next elements:
\end_layout

\begin_layout Itemize
high level architecture
\end_layout

\begin_layout Itemize
design patterns
\end_layout

\begin_layout Itemize
main components and interfaces and thier interactions
\end_layout

\begin_layout Itemize
runtime behaviours
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The System (described in the RASD as the entity containing the main aspects
 of the application) is now divided in three complementary parts.
 The first of them consists of the Mobile App, which interacts with the
 User; the second is the Database Server, containing a protected copy of
 User's and Car's datas and the third is the Application Server, which is
 a Server Java.
 This last element, in particular, has the important role to correctly and
 syncronously manage the communications among the different entities and
 actors, participating to the different horizontal and vertical instances
 of the service.
 We already show the principal actors up in the RASD and now we can say
 that the Client is everyone who aims to drive one of the vehicles offered
 by the Service, whilst different connections and interfaces exist between
 the System and the Car's System (which surely has a proper application
 inside) and between the System and the Payment System.
 The aspect of the registration by the Client is important, because the
 System has finally all the datas of her/him when it is needed and this
 is a simplifiation on the various requests among actors too.
 Hence we can assume that errors due to incorrect User's datas digited by
 the User come up only during her/his registration time.
 Other facilities are considered regarding the payment (characteristic of
 the Payment System) and the primitives of interaction with the database.
 In addiction to the main fucntionalities, the System can offer some extra
 functionalities: a FAQ service, a communication with an operator at necessity,
 a forum service and a news service are also guaranteed for the User.
 We finally conclude this sub paragraph saying that features of applications
 will be discussed in this document, keeping track of what the RASD already
 drew up about the System, with some more details and modifications when
 needed.
 We can say also that the System itself will be built to be reliable and
 efficient, according to its purpose and integration in the World and in
 what we addressed as Environment in the RASD.
\end_layout

\begin_layout Subsection
Definitions, acronyms and abbreviations
\end_layout

\begin_layout Itemize

\series bold
Mobile App:
\end_layout

\begin_layout Itemize

\series bold
Application Server: 
\end_layout

\begin_layout Itemize

\series bold
Server Java: 
\end_layout

\begin_layout Itemize

\series bold
Database Server:
\end_layout

\begin_layout Itemize

\series bold
Horizontal instances:
\end_layout

\begin_layout Itemize

\series bold
Vertical instances:
\end_layout

\begin_layout Itemize

\series bold
Clients: 
\end_layout

\begin_layout Itemize

\series bold
Service:
\end_layout

\begin_layout Subsection
Sources and Reference Documents
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Subsection
High level components and their interactions
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Component-View"

\end_inset

Component View
\end_layout

\begin_layout Standard
The following section describes the component of the system and defines
 their role in the architecture.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Car-Controller"

\end_inset

Car Controller
\end_layout

\begin_layout Standard
The Car Controller manages the following:
\end_layout

\begin_layout Itemize
which cars are in the system, with support for subscription of new cars
 and deletion of old ones;
\end_layout

\begin_layout Itemize
car state logic;
\end_layout

\begin_layout Itemize
knowledge of parking areas and their position;
\end_layout

\begin_layout Itemize
communication with the cars (including authentication).
\end_layout

\begin_layout Standard
The Car controller exposes an interface to the Business Manager, with the
 following types of method:
\end_layout

\begin_layout Itemize
observers of car states and car sets;
\end_layout

\begin_layout Itemize
observer of car position;
\end_layout

\begin_layout Itemize
modifiers of car states.
\end_layout

\begin_layout Standard
The Car Controller is made up of two subcomponents: the Car Pool Controller
 and the Car Unit Controller.
\end_layout

\begin_layout Subsubsection
Car Pool Controller
\end_layout

\begin_layout Standard
The Car Pool Controller encapsulates the handling of car states logic, as
 well as the car pool itself, meaning it must provide the following functionalit
y:
\end_layout

\begin_layout Itemize
car state handling;
\end_layout

\begin_layout Itemize
authentication of cars into the system;
\end_layout

\begin_layout Itemize
subscription of new cars to the pool and removal of old ones.
\end_layout

\begin_layout Standard
The car states are described in the following state diagram:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/Car-state-diagram.svg
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Standard
In order to encapsulate the car states, the Car Pool Controller will interact
 with the Car Unit Controller by issuing commands and receiving events.
 It will also expose an interface to the Business Manager as described in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Car-Controller"

\end_inset

.
 The Car Pool Controller must be able to respond to information queries
 such as:
\end_layout

\begin_layout Itemize
get the state of a car;
\end_layout

\begin_layout Itemize
get a set of cars by position.
\end_layout

\begin_layout Standard
The Car Pool Controller also has knowledge of parking areas and is in charge
 of deciding if a car has been parked in an acceptable location.
 This information is then forwarded to the Business Manager in order for
 it to account for fees or discount when necessary.
\end_layout

\begin_layout Standard
The functionalities implemented by this module will trace requirements [R2.2],
 [R2.3], [R4.4].
\end_layout

\begin_layout Subsubsection
Car Unit Manager
\end_layout

\begin_layout Standard
The Car Unit Controller is in charge of communicating with the car units.
 
\end_layout

\begin_layout Standard
The Car Unit Controller implements the communication protocols between the
 Cars, previously identified as actors, and the core of the application
 to be developed.
 Therefore, this module will provide an interface to the rest of the application
 allowing the exchange of the following types of messages:
\end_layout

\begin_layout Itemize
ordinary telemetry such as GPS position, battery status and other sensor
 information;
\end_layout

\begin_layout Itemize
commands from the application to the car;
\end_layout

\begin_layout Itemize
events from the car to the application.
\end_layout

\begin_layout Standard
The Car Unit Manager is a thin module and has no knowledge of the application's
 logic, or the cars' state.
 It is to be implemented as a thread pool, each thread in charge of keeping
 the communication active with a single car.
\end_layout

\begin_layout Subsubsection
Business Manager
\end_layout

\begin_layout Standard
The Business Manager is the core of the application, in charge of all reservatio
n operations, including the computation of a reservation's cost.
\end_layout

\begin_layout Standard
It will interact with the other modules like so:
\end_layout

\begin_layout Itemize
interaction with the Car Controller:
\end_layout

\begin_deeper
\begin_layout Itemize
query cars by position;
\end_layout

\begin_layout Itemize
query the state of a car;
\end_layout

\begin_layout Itemize
change the state of a car as a result of operations such as creation, deletion
 or expiration of a reservation;
\end_layout

\begin_layout Itemize
receive car events such as start/end of rides, activations/deactivations
 of the car's engine;
\end_layout

\begin_layout Itemize
receive special information, such as a badPark event, needed to account
 for fees to the user;
\end_layout

\end_deeper
\begin_layout Itemize
interaction with the User Controller
\end_layout

\begin_layout Standard
It will also interact with the external payment system in order for the
 transactions to happen.
\end_layout

\begin_layout Standard
It is responsibility of the Business Manager to ensure the correct handling
 of reservation logic and the fulfilling of related requirements [R2.4],
 [R3.2], [R4.1], [R4.2], [R4.3], [R4.5].
\end_layout

\begin_layout Subsubsection
User Controller
\end_layout

\begin_layout Subsection
Deployment View
\end_layout

\begin_layout Subsection
Runtime View
\end_layout

\begin_layout Subsubsection
Registration
\end_layout

\begin_layout Standard
In this phase the NonRegisteredUser obtains a valid registration to the
 service.
 She/He 
\series bold
(1)
\series default
 expresses the will to make a registration by clicking on the registration
 Button in the Mobile App.
 The Mobile App sends a new request to the Server Java which 
\series bold
(2)
\series default
 opens a new connection with the DBMS for the future storage of datas from
 the whole process.
 At this point the Mobile App 
\series bold
(3)
\series default
 displays to the User the form with fields to be filled for the Registration.
 The User compiles the form and confirms it to the Mobile App.
 The Mobile App and the Server Java check if the compilation is maden correctly.
 If it is not the Mobile App 
\series bold
(4) 
\series default
alerts the User of the lackness, else 
\series bold
(5) 
\series default
datas are finally stored in the DBMS from the Server and the User receives
 the confirmation of the correct registration.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramRegistration.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Standard
In this phase the User 
\series bold
(1)
\series default
 compiles the form with her/his User Name and her/his password, the Mobile
 App sends the request for accessing to the Server Java, which questions
 the DBMS.
 The database makes a research and 
\series bold
(2) 
\series default
informs the Server that there isn't any correspondence between the datas
 it has received and any of the stored instances, or 
\series bold
(3) 
\series default
the correspondence exists.
 In every of these cases the Server warns the Mobile App of the current
 event and the User is so alerted by the App.
 If the authentication process ends without errors the Server retrieves
 correct informations from the DBMS and 
\series bold
(4) 
\series default
as a final result the User can see her/his profile displayed by the Mobile
 App.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramAutentication.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Activating the Money Saving Option
\end_layout

\begin_layout Standard
In this phase, the User who gets on the Car, 
\series bold
(1) 
\series default
types on the Screen of the Car the will to activates the Money Saving Option.
 The Car's System asks the User which is the final destination of her/his
 journey.
 The User types the Destination and 
\series bold
(3) 
\series default
the Car's System checks the validity of the just inserted coordinates through
 the GPS service.
 If the control reports any error, 
\series bold
(4) 
\series default
the User has to digit again the Destination (she/he can also come back to
 the previous context without Activating the Money Saving Option); else
 
\series bold
(5)
\series default
 the Car's System makes a request to the Server for obtaining the list of
 the available and nearest Safe Areas given the Position.
 The Server processes the request and effectively returns to the Car's System
 the requested list.
 At this point, 
\series bold
(6) 
\series default
the list is showed to the User who selects one of the Areas.
 It is the Car's System which finally 
\series bold
(7) 
\series default
computes the path to the Safe Area and 
\series bold
(8) 
\series default
shows it to the User through the Car's Screen.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDActivatingSaveMoneyOption.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Finish a Ride
\end_layout

\begin_layout Standard
The User tells to the Car's System that 
\series bold
(1) 
\series default
the ride ended and 
\series bold
(2) 
\series default
the Car's System asks for a confirmation.
 The Car's System 
\series bold
(3)
\series default
 forwards the information to the Server which 
\series bold
(4) 
\series default
wants to know from the Car's System all the details of the ride, for proceding
 to the payment phase.
 The system on board effevtively provides the required datas.
 The Server 
\series bold
(5) 
\series default
processes the incoming informations and after 
\series bold
(6)
\series default
 sends a request of payment to the Payment System.
 This last component confirms the payment to the Server and 
\series bold
(7)
\series default
 explicitly asks for the payment to the User through the Mobile App.
 The User fills the form with her/his sensible datas about credit card and
 sends it again to the Payment System.
 The whole money transaction can 
\series bold
(8) 
\series default
complete with errors and the User is alerted of this by the Mobile App;
 or 
\series bold
(9) 
\series default
can complete correctly.
 In this last phase the User and the Server are alerted and the Server fills
 some fields in the DBMS with the history of current User's payment.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDFinishARide.svg
	display false
	scale 15

\end_inset


\end_layout

\begin_layout Subsubsection
Search and Book a nearby Car
\end_layout

\begin_layout Standard
In this phase the Logged User makes the request 
\series bold
(1)
\series default
 to see the available Cars on the Screen of her/his device.
 Hence the Mobile App asks to the Server for the list of all the available
 Cars and, once obtained it, shows it to the User.
 At this point the User 
\series bold
(2) 
\series default
selects one of the Car on the Screen.
 The App forward the selection to the Server which controls if the Car is
 still available.
 If the Car is no available anymore, 
\series bold
(3) 
\series default
the User is informed by the App and there is the return to the previous
 context.
 Else 
\series bold
(4) 
\series default
the prenotation is confirmed, the Mobile App 
\series bold
(5) 
\series default
asks to the Server to retrieves the complete informations of the Car, 
\series bold
(6) 
\series default
The details of the reservation are showed to the User and 
\series bold
(7) 
\series default
she/he can see the details of the Car too.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSearchBookNearbyCar.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Time Expiration
\end_layout

\begin_layout Standard
Once 
\series bold
(1)
\series default
 a prenotation is confirmed, a countdown associated to the current ride
 instance starts.
 Reached a given timeout, 
\series bold
(2) 
\series default
the Server informs the Mobile App of the expiration and the User is warned
 about the event and the amend to pay.
 She/He will pay it afterwards through a redirection to the Payment System.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDSequenceDiagramTimeExpiration.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsubsection
Locking a Car
\end_layout

\begin_layout Standard
The Car's System 
\series bold
(1)
\series default
 constantly verify a leave condition which consists to understand if all
 the passengers left the Car after a ride through the Car's Sensors.
 After the Server has received the leave condition, 
\series bold
(2)
\series default
 it Locks the Car which confirms the event through an ack.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDLockingACar.svg
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Subsubsection
Unlocking a Car
\end_layout

\begin_layout Standard
The Server 
\series bold
(1)
\series default
 constantly monitors the User position and it informs the Mobile App of
 the nearness condition when it exists.
 The Mobile App 
\series bold
(2)
\series default
 shows to the User a button or a popup, giving her/him the information of
 nearness.
 The User confirms the will to unlock the near Car and 
\series bold
(3) 
\series default
the Server sends the command to the Car System.
 It finally warns the Server of the Unlock and 
\series bold
(4) 
\series default
the User is informed of the event.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDUnlockingACar.svg
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Subsubsection
Telemetry
\end_layout

\begin_layout Standard
The Car constantly continues to communicate with the System during its lifetime.
 In this particular case there is an updating of a first countdown T1 by
 the Car's System.
 If the Car's System doesn't send anything after the countdown is reached,
 
\series bold
(2) 
\series default
a position request is made by the Server after the achievement of a second
 countdown in it.
 Else 
\series bold
(3) 
\series default
the Car's System correctly sends its position to the Server Java, which
 replies with an Ack.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename diagrams-svg/DDTelemetrySystem.svg
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Subsection
Component Interfaces
\end_layout

\begin_layout Subsection
Selected Architectural Styles and Patterns
\end_layout

\begin_layout Subsection
Other decisions
\end_layout

\begin_layout Section
User Interface Design
\end_layout

\begin_layout Section
Requirement Tracebility
\end_layout

\begin_layout Standard
All requirements not explicitly traced in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Component-View"

\end_inset

 will result from the combined action of the formerly identified application
 modules.
 This is true for all [R5.*] requirements as well as [R6.1], [R7.1].
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Section
Hours of work
\end_layout

\end_body
\end_document
